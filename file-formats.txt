Jack Huffman
CS338 Computer Security
Jeff Ondich

Private Key:

The private key starts with a header and ends with a footer denoting the start and end of the private key.
The key itself is an encoded using ASN.1 DER encoding and contains the following items, represented as integers
    version
    modulus
    publicExponent
    privateExponent
    prime1
    prime2
    exponent1
    exponent2
    coefficient

As well there may be some info regarding other prime numbers if the key is not factored by exactly 2 primes

To decode the file I used Lapo Luchini's ASN.1 decoder
This process starts with the base64 encoded version and decodes it into it's plain text.
After it is decoded, the decoder does a good job of parsing the data into it's subsection so that it is organized and readable.
The contents are parsed in the order I listed above on lines 5-13
(Note, when I say that the first bbytes of this part, what I am saying is that these are the first bytes following information I relayed previously, starting with the sequence whose information is found at the beginning of the file with no offset. Everything else has an offset of some amount but I am simply picking up right after where the previous information ended)

sequence - There is also a sequence integer which provides information on the length of the entire file. The value of this sequence for my key is 0x308206E4
    In my case the first two digits 0x30 represent a byte which conveys information about the type of the following integer
    0x30 in binary is 00110000, from this the first two bits '00' show its universal. The next bit '1' shows it's constructed, and the final 5 bits '10000' or 16 shows that what follows is the sequence
    The next byte conveys some more information about the length of the entire sequence. 0x82 in binary is 10000010 which shows the first bit '1' conveys the length is within 1-126 octets and the following bits '0000010' shows that it is 2 length octets
    The last bytes 0x06E4 shows that the length of the sequence is 0x6E4 or 1764 bytes long on top of the 4 bytes which conveyed all this information

version - 0x020100 the 0x02 is the integer tag which shows what follows is an integers. The first 0x01 represents the version is one byte long, and the second 0x01 represents the value being stored in version, which is 1 indicating it is using version 1 of the PKCS #1 standard

modulus (n) - this is a large integer which is primary part of RSA encryption and is used in the math of claculating ciphertext and recovering plain text. It is notably the product of prime1 and prime2
    The first 4 bytes of this convey information regarding the length and type of what follows. These first 4 bytes are 0x02820181
    As above 0x02 represents its an integer, 0x82 shows that it has a length that can be represented in two octets, and 0x0181 shows that the integer is 0x181 bytes long or 385 bytes long. The value of the integer is below
    0x00a9e2886d02c4b53135e0149d783f5042185db90199cf9656900999dffac40be6bee44d0d9dfc8fc87fb13104ea644c59b330e295a95ba0075aa76fc640a3a6822e94e80b4c39a38a8ecc88700f06b59287ff9e086370b128a1d2165a561c3563ad0d0e3f6b962d6f89d5f414ab4bd2f01129d26f6801b51799d94213bae7eaa6947c5abf6a413f1053c220b7e8efe012d6e8ec6853d63cb1358ebcc689cac9eac0cdf263144fd35846edaa777285bdaffaae21463a2f6dc4e78b11d0df226fd95c8a1f596638e68f0b118bc162e210f597e6e4966453ca9611a70f4e061157293b9e40aba86dfa629a3f469dc8c7e82cf2bba17f489816cd089cc60cae3cdf23ed175c93931188b9a96fcfc8ffc75b5e34a5ce123aaa6cabdf5676fd3f817d228cd0ecd046822541e8bfd42ad7524490b78647ce3cc70d0c1718d6126769713d4539723ea7e72ffcc0f94b67ce93002a2231ae573a965eab97666e9cb10e3167973e4a3373a00c058d570593fca63ecfdadfeae6dcb035409ee18200030dcf0d

publicExponent (e) - this is an integer which is part of the public key and is used in combination with the modulus to form the public key so that others can encrypt data that only the private key can decrypt
    The first 2 bytes are 0x0203 which shows it is an integer of length 3 bytes. It value is 0x010001 or 65537 in decimal. This is the value of the public exponent

privateExponent (d) - this private exponent d is a secret integer which allows the holder to decrypt information which has been encrypted using the corresponding public key. It should be kept secret so that integrity is maintained
    The first 4 bytes are 0x02 82 01 80 showing it is an integer whose length can be represented in two octets, and has a length of 0x180 or 384 bytes. The value of those 384 bytes is below
    0x1306d818bd72a2887c6c3862da90dcc04a5254e22503e6e693034044a1a54b5ff0894947f925cc44bc68700108ef6acdb1100c908e83408d124e266aa1dab24f6a402b2cf8c08bdc7cd9d37e1970baed4a660aa10de2153563ca4fce964e5a7c6b6946eb3b757a693f9ac2d77dc7e43c16f0042d8e0c82e7bdc7636b2a47c73418f54484a3b5e306451b3ce6dc23e188baa123b91b8aa70981e216aa75cc4c890a47069aaa2fb68ff081b5d1e2f5afa50202769f92ecb4f294ac32b69e071157ac15b0b886cdfdbec6279010689d92a493a0b057ad1d8a7af9e6251fc8f16aa724e69e1ebd18fe50529d9c103f49d31282848cb02d1e57197821d5f4349fc4746196f729021e8be71b66ad02f44592703fde81683790a07cca4f3755a4d00efafa387f2186d101485bf29590d0e79eb4944ce078a5be5c2e45d6c9349d5b22740eec97cfcddeecef51349fcc94341375fc42dc331a66f648d48860e220977822d44246d9ff07746daa3e3765b9e3d5ba8fb6bc232377622884cfcc1cf19e9701

prime1 (p) - This is a large prime number which when multiplied with q gives you the private key. It is used as part of the key generation process
    The first 3 bytes are 0x02 81 C1 showing it is an integer with length that can be expressed in one octet. It has a length of 0xC1 or 193 bytes. It's value is found below
    0x00d6ce43feae23443c3febafcddd7f89dc23e6cfe5915c5a475c518876f8157a7a950763cbd0ba9790ffa0069a5df85abae4ab7c18c2dfe3316c4eebd6b3f52bc6a2ae1f289d2b6f638db748b77d23b2974f6733c8bda3cd87aca2b3bd357c66b508de3fe5bb483e56584acaf336376cb826d53ba48dda8eba488ae63f6193182db348c6df497199f65152adb587b28f79efa79f2d125c713820abf0cc09757379c94bed3ed814ecbeb5fa539db7da1b05708215b2b0c9f9c5a60b5b5857ac8331

prime2 (q) - This is a large prime number which when multiplied with p gives you the private key. It is used as part of the key generation process
    The first 3 bytes are 0x02 81 C1 showing it is an integer with length that can be expressed in one octet. It has a length of 0xC1 or 193 bytes. It's value is found below
    0x00ca76e93a5e923268faa39e916c1085a11de0f8a2f6385321c5e588dd8a1afc9c404472619d1db67a84831d7d5f050ab6a35eff2648f1f370ab1dc9d1296f6c5950275d818436cdf18bd30520cfc50c0b506e68f1fb645ec72fe96aa1b0d05c37580552953c50a37d4f106597f1b9e5ca3afb61122b1f3531c9e9e82c147e9a612296bad82024929943d8cdecbb346fc781552b46f1e292145c0a3dd5114a087c824b42ff48c380c13cca2726e9a4ac02078c6f282fff25dc1b48cbab3c7c7a9d

exponent1 - This is calculated by doing (d mod (p-1)) and is a value which is used to optimize the RSA decryption process
    The first 3 bytes are 0x02 81 C1 showing it is an integer with length that can be expressed in one octet. It has a length of 0xC1 or 193 bytes. It's value is found below
    0x00b1fcf81a6ff088f9e37d478f2d9a208168be3845e0ccc5819bdd735620faab22279a97f6aa5df2791357662142fc2731f588a2ab61ce6252f18bf39f543e32a7c4e4c2acc48ed91d84affa711020243b7c6fe758ceca8be38008d12656cb5dcf6429c4887746c560868872e2546a588bbea1b16a08a0b0e36a78ad9097296b3f72ef3ada89e0b7d282501fdfeb30e9f1ffc2c50273d4657c3c963c50d5059d49aca25d53557901328557873188c610ddd0fbf93eb77ea498419de772ac332601

exponent2 - This is calculated by doing (d mod (q-1)) and is a value which is used to optimize the RSA decryption process
    The first 3 bytes are 0x02 81 C1 showing it is an integer with length that can be expressed in one octet. It has a length of 0xC1 or 193 bytes. It's value is found below
 0x00c4a9aab4aae621973d56af911c42143b4355a2ce5092b79587b00539048c6031ba6f82177551464e4de73a3eec8c6e32a8107f9105ac17c6aa407e27f0b2adb1379d75437854efc8a00432e80349a900587956f12e3af9a14bd5d46108e9eb994aa3a8eb1332550c443f6e1fa08aed3d79fb71f7fef10a6fb96cbebc0a904b8eecd532dafaa5ebcc7a4ddf01037ad4d51ab8cb17d79f383c1487523663dbe0d068938899866978e8bb0eb5e7236e74326878ae048052bbc8c8abf641f7b80635

coefficient - This is calculated by doing ((inverse of q) mod p) and is a value which is used to optimize the RSA decryption process
    The first 3 bytes are 0x02 81 C0 showing it is an integer with length that can be expressed in one octet. It has a length of 0xC0 or 192 bytes. It's value is found below
    0x1285d0ab43ff1d67d7f5c9291754173a3087c06ee11419b9f25c5a3626fbbf0c2bc5d4ca822120baadea7e4d7cc2db86e60dd5fe776075ef663b1571fb1fb2c6c0897d017f3d2e8e6ce088510b01f1208142728654a947e119e418f150b1e4c76630000fe9638077322a3fcd0b3d6a979808f067c731224f5403f804f9b93470515dedb4c5e3771ab204fb36cf654d6320d477c1cbb13f99326c51c700738ed017dfcc92f7086c9557ab560189b58d36ae0f55eb8d117a180f100445ca38723e


Public Key:

The .pub file starts with the ssh-rsa heading indicating the key type. Public key is not in a readable format as it is written in SSH-format, to make it more readable we can use base64 and hexdump to read it. The output is as such
-----BEGIN PUBLIC KEY-----
MIIBojANBgkqhkiG9w0BAQEFAAOCAY8AMIIBigKCAYEAqeKIbQLEtTE14BSdeD9Q      
QhhduQGZz5ZWkAmZ3/rEC+a+5E0NnfyPyH+xMQTqZExZszDilalboAdap2/GQKOm      
gi6U6AtMOaOKjsyIcA8GtZKH/54IY3CxKKHSFlpWHDVjrQ0OP2uWLW+J1fQUq0vS      
8BEp0m9oAbUXmdlCE7rn6qaUfFq/akE/EFPCILfo7+AS1ujsaFPWPLE1jrzGicrJ      
6sDN8mMUT9NYRu2qd3KFva/6riFGOi9txOeLEdDfIm/ZXIofWWY45o8LEYvBYuIQ      
9Zfm5JZkU8qWEacPTgYRVyk7nkCrqG36Ypo/Rp3Ix+gs8ruhf0iYFs0InMYMrjzf      
I+0XXJOTEYi5qW/PyP/HW140pc4SOqpsq99Wdv0/gX0ijNDs0EaCJUHov9Qq11JE      
kLeGR848xw0MFxjWEmdpcT1FOXI+p+cv/MD5S2fOkwAqIjGuVzqWXquXZm6csQ4x      
Z5c+SjNzoAwFjVcFk/ymPs/a3+rm3LA1QJ7hggADDc8NAgMBAAE=
-----END PUBLIC KEY-----

When decoded the first 4 bytes read 0x30 82 01 A2 again showing the length of the whole sequence. Follwing this is more infromation regarding the type of algorithm used and whether there are any parameters. which there are none. 
Starting at offset 28 we have 0x02 82 01 81
As above 0x02 represents its an integer, 0x82 shows that it has a length that can be represented in two octets, and 0x0181 shows that the integer is 0x181 bytes long or 385 bytes long. The value of the integer is below\
0x00a9e2886d02c4b53135e0149d783f5042185db90199cf9656900999dffac40be6bee44d0d9dfc8fc87fb13104ea644c59b330e295a95ba0075aa76fc640a3a6822e94e80b4c39a38a8ecc88700f06b59287ff9e086370b128a1d2165a561c3563ad0d0e3f6b962d6f89d5f414ab4bd2f01129d26f6801b51799d94213bae7eaa6947c5abf6a413f1053c220b7e8efe012d6e8ec6853d63cb1358ebcc689cac9eac0cdf263144fd35846edaa777285bdaffaae21463a2f6dc4e78b11d0df226fd95c8a1f596638e68f0b118bc162e210f597e6e4966453ca9611a70f4e061157293b9e40aba86dfa629a3f469dc8c7e82cf2bba17f489816cd089cc60cae3cdf23ed175c93931188b9a96fcfc8ffc75b5e34a5ce123aaa6cabdf5676fd3f817d228cd0ecd046822541e8bfd42ad7524490b78647ce3cc70d0c1718d6126769713d4539723ea7e72ffcc0f94b67ce93002a2231ae573a965eab97666e9cb10e3167973e4a3373a00c058d570593fca63ecfdadfeae6dcb035409ee18200030dcf0d

This value is the same modulus that we found when looking at the private key, which makes sense as the modulus is part of the public key pair that we need to be able to encrypt data

Following this at offset 417 we have 0x02 03 01 00 01 
The first 2 bytes are 0x0203 which shows it is an integer of length 3 bytes. It value is 0x010001 or 65537 in decimal. This is the value of the public exponent

Given that we have both the value of the modulus and the public exponent, someone with access to this .pub file would be able to encode data that only those with the privte key would be able to decrypt

Sanity Check:

We can go through and check to make sure that the values listed above work. 
We can see that when we muliply p and q together we do in fact get the private key
Additionally when we compute (d mod (p-1)) we can see we get exponent 1
Additionally when we compute (d mod (q-1)) we can see we get exponent 1
Additionally when we compute ((inverse of q) mod p) we can see we get the coefficient

Given that these are mathematical properties we expect from the values of our private key information, we can be assured that the proper numbers were found and properly calcualted
Additionally if we compare the modulus values we found in the private and public key we can see they are the same
Additionally if we compare the publicExponent values we found in the private and public keys we can see they are the same

Given that all these things line up we can be certain that we have properly read through both the files and interpeted the data to find the correct values for the various pieces of key information
